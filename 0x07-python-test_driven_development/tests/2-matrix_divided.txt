This is a docfile meant to test the function matrix_divided in 2-matrix_divided.py

First, import the function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Next, we test various cases for appropriate output
>>> matrix = [
... 	[1, 2, 3],
... 	[4, 5, 6]
... ]

>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero
>>> print(matrix_divided(matrix, "str"))
Traceback (most recent call last):
	...
TypeError: div must be a number
>>> print(matrix_divided([], 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> print(matrix_divided([[]], 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> print(matrix_divided([[1, 5, 7], [8, 12]], 3))
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size
>>> print(matrix_divided([[1, 'abd', 5], [7, 8, 9]], 4))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> print(matrix_divided("strange", 5))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> print(matrix_divided([[4], [8], [16]], 4))
[[1.0], [2.0], [4.0]]
